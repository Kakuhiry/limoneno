name: Deploy to ECR
on:
  workflow_dispatch:
  push:
    branches: [ ci/cd-testing ]
    # paths:
    #   - "frontend/src/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
#   bump:
#     name: Bump version
#     runs-on: ubuntu-latest
#     outputs:
#       version: ${{ steps.version.outputs.prop }}
#     steps:
#     - name: Check out code
#       uses: actions/checkout@v2
  
#     - name: App versioning
#       working-directory: frontend
#       run: |
#         npm config set git-tag-version false
#         npm version patch

#     - name: Configure git
#       run: |
#         git config user.name "Github-Actions"
#         git config user.email "<>"

#     - name: Get version
#       id: version
#       uses: notiz-dev/github-action-json-property@release
#       with:
#         path: "frontend/package.json"
#         prop_path: "version"

#     - name: Commit new version
#       working-directory: frontend
#       run: |
#         git add package.json
#         git commit -m "release(frontend): ${{ steps.version.outputs.prop }}"
#         git push
      
  build:
    if: ${{ needs.changes.outputs.changes != '[]' && needs.changes.outputs.changes != '' }}
    name: Build & Push Image
    runs-on: ubuntu-latest
    # needs:
    #   - bump
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

####

    - name: Get version
      id: version
      uses: notiz-dev/github-action-json-property@release
      with:
        path: "frontend/package.json"
        prop_path: "version"

####


    - name: Build, tag, and push image to Amazon ECR
      working-directory: frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: web
        IMAGE_TAG: ${{ steps.version.outputs.prop }} #${{ needs.bump.outputs.version }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG